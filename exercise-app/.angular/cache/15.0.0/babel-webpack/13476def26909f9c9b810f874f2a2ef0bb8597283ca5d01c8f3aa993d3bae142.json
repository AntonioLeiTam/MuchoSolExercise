{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { AuthConstant } from '../constants/auth.constants';\nimport { EndPointConstants } from '../constants/endpoint.constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TrendService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n  }\n  getAllTrends() {\n    const headers = new HttpHeaders({\n      'X-Avantio-Auth': AuthConstant.token\n    });\n    this.httpClient.get(EndPointConstants.WebService.newsEndPoint(), {\n      headers: headers\n    }).subscribe(trend => console.log(trend));\n    return this.httpClient.get(EndPointConstants.WebService.newsEndPoint(), {\n      headers: headers\n    });\n  }\n  createNewTrend(newTrend) {\n    const headers = new HttpHeaders({\n      'X-Avantio-Auth': AuthConstant.token\n    });\n    return this.httpClient.post(EndPointConstants.WebService.newsEndPoint(), newTrend, {\n      headers: headers\n    });\n  }\n  updateNewTrend(title, trendId) {\n    const body = {\n      title: title\n    };\n    const headers = new HttpHeaders({\n      'X-Avantio-Auth': AuthConstant.token\n    });\n    return this.httpClient.put(EndPointConstants.WebService.newsEndPointById(trendId), body, {\n      headers: headers\n    });\n  }\n  deleteTrend(trendId) {\n    const headers = new HttpHeaders({\n      'X-Avantio-Auth': AuthConstant.token\n    });\n    return this.httpClient.delete(EndPointConstants.WebService.newsEndPointById(trendId), {\n      headers: headers\n    });\n  }\n  getTrendById(trendId) {\n    const headers = new HttpHeaders({\n      'X-Avantio-Auth': AuthConstant.token\n    });\n    return this.httpClient.get(EndPointConstants.WebService.newsEndPointById(trendId), {\n      headers: headers\n    });\n  }\n  getAllTrendsByProvider(provider, trends) {\n    return trends.filter(trend => trend.provider === provider);\n  }\n}\nTrendService.ɵfac = function TrendService_Factory(t) {\n  return new (t || TrendService)(i0.ɵɵinject(i1.HttpClient));\n};\nTrendService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TrendService,\n  factory: TrendService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAG9D,SAASC,YAAY,QAAQ,6BAA6B;AAC1D,SAASC,iBAAiB,QAAQ,iCAAiC;;;AAMnE,OAAM,MAAOC,YAAY;EACvBC,YAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;EAAe;EAEtCC,YAAY;IACjB,MAAMC,OAAO,GAAG,IAAIP,WAAW,CAAC;MAC9B,gBAAgB,EAAEC,YAAY,CAACO;KAChC,CAAC;IAEF,IAAI,CAACH,UAAU,CACZI,GAAG,CAAUP,iBAAiB,CAACQ,UAAU,CAACC,YAAY,EAAE,EAAE;MACzDJ,OAAO,EAAEA;KACV,CAAC,CACDK,SAAS,CAAEC,KAAK,IAAKC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;IAE3C,OAAO,IAAI,CAACR,UAAU,CAACI,GAAG,CACxBP,iBAAiB,CAACQ,UAAU,CAACC,YAAY,EAAE,EAC3C;MACEJ,OAAO,EAAEA;KACV,CACF;EACH;EAEOS,cAAc,CAACC,QAAe;IACnC,MAAMV,OAAO,GAAG,IAAIP,WAAW,CAAC;MAC9B,gBAAgB,EAAEC,YAAY,CAACO;KAChC,CAAC;IAEF,OAAO,IAAI,CAACH,UAAU,CAACa,IAAI,CACzBhB,iBAAiB,CAACQ,UAAU,CAACC,YAAY,EAAE,EAC3CM,QAAQ,EACR;MACEV,OAAO,EAAEA;KACV,CACF;EACH;EAEOY,cAAc,CAACC,KAAa,EAAEC,OAAe;IAClD,MAAMC,IAAI,GAAG;MACXF,KAAK,EAAEA;KACR;IACD,MAAMb,OAAO,GAAG,IAAIP,WAAW,CAAC;MAC9B,gBAAgB,EAAEC,YAAY,CAACO;KAChC,CAAC;IAEF,OAAO,IAAI,CAACH,UAAU,CAACkB,GAAG,CACxBrB,iBAAiB,CAACQ,UAAU,CAACc,gBAAgB,CAACH,OAAO,CAAC,EACtDC,IAAI,EACJ;MACEf,OAAO,EAAEA;KACV,CACF;EACH;EAEOkB,WAAW,CAACJ,OAAe;IAChC,MAAMd,OAAO,GAAG,IAAIP,WAAW,CAAC;MAC9B,gBAAgB,EAAEC,YAAY,CAACO;KAChC,CAAC;IAEF,OAAO,IAAI,CAACH,UAAU,CAACqB,MAAM,CAC3BxB,iBAAiB,CAACQ,UAAU,CAACc,gBAAgB,CAACH,OAAO,CAAC,EACtD;MACEd,OAAO,EAAEA;KACV,CACF;EACH;EAEOoB,YAAY,CAACN,OAAe;IACjC,MAAMd,OAAO,GAAG,IAAIP,WAAW,CAAC;MAC9B,gBAAgB,EAAEC,YAAY,CAACO;KAChC,CAAC;IAEF,OAAO,IAAI,CAACH,UAAU,CAACI,GAAG,CACxBP,iBAAiB,CAACQ,UAAU,CAACc,gBAAgB,CAACH,OAAO,CAAC,EACtD;MACEd,OAAO,EAAEA;KACV,CACF;EACH;EAEOqB,sBAAsB,CAACC,QAAgB,EAAEC,MAAe;IAC7D,OAAOA,MAAM,CAACC,MAAM,CAAElB,KAAK,IAAKA,KAAK,CAACgB,QAAQ,KAAKA,QAAQ,CAAC;EAC9D;;;mBAjFW1B,YAAY;AAAA;;SAAZA,YAAY;EAAA6B,SAAZ7B,YAAY;EAAA8B,YAFX;AAAM","names":["HttpHeaders","AuthConstant","EndPointConstants","TrendService","constructor","httpClient","getAllTrends","headers","token","get","WebService","newsEndPoint","subscribe","trend","console","log","createNewTrend","newTrend","post","updateNewTrend","title","trendId","body","put","newsEndPointById","deleteTrend","delete","getTrendById","getAllTrendsByProvider","provider","trends","filter","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\antonio.min.lei.tam\\Desktop\\New folder\\MuchoSolExercise\\exercise-app\\src\\app\\services\\trend.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { AuthConstant } from '../constants/auth.constants';\nimport { EndPointConstants } from '../constants/endpoint.constants';\nimport { Trend } from '../models/trend.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TrendService {\n  constructor(private httpClient: HttpClient) {}\n\n  public getAllTrends(): Observable<Trend[]> {\n    const headers = new HttpHeaders({\n      'X-Avantio-Auth': AuthConstant.token,\n    });\n\n    this.httpClient\n      .get<Trend[]>(EndPointConstants.WebService.newsEndPoint(), {\n        headers: headers,\n      })\n      .subscribe((trend) => console.log(trend));\n\n    return this.httpClient.get<Trend[]>(\n      EndPointConstants.WebService.newsEndPoint(),\n      {\n        headers: headers,\n      }\n    );\n  }\n\n  public createNewTrend(newTrend: Trend): Observable<Trend> {\n    const headers = new HttpHeaders({\n      'X-Avantio-Auth': AuthConstant.token,\n    });\n\n    return this.httpClient.post<Trend>(\n      EndPointConstants.WebService.newsEndPoint(),\n      newTrend,\n      {\n        headers: headers,\n      }\n    );\n  }\n\n  public updateNewTrend(title: string, trendId: string): Observable<any> {\n    const body = {\n      title: title,\n    };\n    const headers = new HttpHeaders({\n      'X-Avantio-Auth': AuthConstant.token,\n    });\n\n    return this.httpClient.put<any>(\n      EndPointConstants.WebService.newsEndPointById(trendId),\n      body,\n      {\n        headers: headers,\n      }\n    );\n  }\n\n  public deleteTrend(trendId: string): Observable<any> {\n    const headers = new HttpHeaders({\n      'X-Avantio-Auth': AuthConstant.token,\n    });\n\n    return this.httpClient.delete<any>(\n      EndPointConstants.WebService.newsEndPointById(trendId),\n      {\n        headers: headers,\n      }\n    );\n  }\n\n  public getTrendById(trendId: string): Observable<Trend> {\n    const headers = new HttpHeaders({\n      'X-Avantio-Auth': AuthConstant.token,\n    });\n\n    return this.httpClient.get<Trend>(\n      EndPointConstants.WebService.newsEndPointById(trendId),\n      {\n        headers: headers,\n      }\n    );\n  }\n\n  public getAllTrendsByProvider(provider: string, trends: Trend[]): Trend[] {\n    return trends.filter((trend) => trend.provider === provider);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}